from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from flask_sslify import SSLify
import learning_utils
import image_analyzer as ia
import trainer as tr
import trainer2 as tr2
import base64
import database

from PIL import Image
from io import BytesIO
from codecs import encode
import numpy as np
import cv2
app = Flask(__name__)
CORS(app)

@app.route('/')
def index():
    analyzer_respnse = ia.analyzer('static/img/img4.jpg')
    feature = learning_utils.Feature(analyzer_respnse[0],analyzer_respnse[1])
    feututeOutput = feature.getFeature()
    className = str( tr.classify(feututeOutput)).replace("[\'","").replace("\']","")
    #text1 = str(cout_of_co)
    database.writeRecortToDatabase("Tekst to writepythone ")
    return render_template("index.html",count_of_el=feututeOutput[0],percent = str(analyzer_respnse[1]) ,ai_raport = className)

@app.route('/open_settings')
def open_settings():
    return render_template("settings.html")


@app.route('/learn')
def learn():
    tr.createDatasetfromImages()
    return index()

@app.route('/learn2')
def learn2():
    tr2.lerning()
    return index()
@app.route('/upload', methods=['POST'])
def upload():
    if 'uploaded_image' in request.files:
        image_file = request.files['uploaded_image']
        if image_file.filename != '':
            image_file.save('static/img/img4.jpg')
        return index()
    if 'file' in request.files:
        image_file = request.files['uploaded_image']
        if image_file.filename != '':
            image_file.save('static/img/img4.jpg')
        return jsonify({ 'message': 'File uploaded successfully'})

@app.route('/upload_mobile', methods=['POST'])
def obsluz_post():
    if request.method == 'POST':
        try:
            dane = request.get_data(as_text=True)
            dane = dane.replace('\n','')

            # Dodanie paddingu
            missing_padding = len(dane) % 4
            dane += '=' * (4 - missing_padding)
            dane = ""

            print("Otrzymane dane:", dane)
            dane_decoded = base64.b64decode(dane)
            with open("imageToSave.jpg", "wb") as fh:
                fh.write(dane_decoded)

            response = { 'message': 'Dane odebrane poprawnie'}
            return jsonify(response)

        except Exception as e:
            print("Błąd podczas obsługi żądania POST:", str(e))
            response = { 'message': 'Błąd podczas obsługi żądania'}
            return jsonify(response)




if __name__ == "__main__":
    #app.run(ssl_context='adhoc', host='0.0.0.0',debug=True)
    app.run( host='0.0.0.0',debug=True)
